"""Initial migration

Revision ID: 4bdd7fe98495
Revises: 
Create Date: 2025-09-16 13:18:34.946969

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '4bdd7fe98495'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('performance_logs',
    sa.Column('log_id', sa.Integer(), nullable=False),
    sa.Column('claim_id', sa.UUID(), nullable=False),
    sa.Column('num_pages', sa.Integer(), nullable=True),
    sa.Column('extract_processing_time_sec', sa.Float(), nullable=True),
    sa.Column('extract_cost_usd', sa.Float(), nullable=True),
    sa.Column('total_items_processed', sa.Integer(), nullable=True),
    sa.Column('rules_applied_count', sa.Integer(), nullable=True),
    sa.Column('adjudicate_processing_time_sec', sa.Float(), nullable=True),
    sa.Column('time_irda_filter_sec', sa.Float(), nullable=True),
    sa.Column('time_rule_matching_sec', sa.Float(), nullable=True),
    sa.Column('time_rule_application_sec', sa.Float(), nullable=True),
    sa.Column('time_sanity_check_sec', sa.Float(), nullable=True),
    sa.Column('cost_rule_matching_usd', sa.Float(), nullable=True),
    sa.Column('cost_rule_application_usd', sa.Float(), nullable=True),
    sa.Column('cost_sanity_check_usd', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['claim_id'], ['claims.claim_id'], ),
    sa.PrimaryKeyConstraint('log_id'),
    sa.UniqueConstraint('claim_id')
    )
    op.create_index(op.f('ix_performance_logs_log_id'), 'performance_logs', ['log_id'], unique=False)
    op.drop_index(op.f('ix_extraction_logs_log_id'), table_name='extraction_logs')
    op.drop_table('extraction_logs')
    op.drop_index(op.f('ix_adjudication_logs_log_id'), table_name='adjudication_logs')
    op.drop_table('adjudication_logs')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('adjudication_logs',
    sa.Column('log_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('claim_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('total_items_processed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rules_applied_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('time_irda_filter_sec', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('time_rule_matching_sec', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('time_rule_application_sec', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_processing_time_sec', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('cost_rule_matching_usd', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('cost_rule_application_usd', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('time_sanity_check_sec', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('cost_sanity_check_usd', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['claim_id'], ['claims.claim_id'], name=op.f('adjudication_logs_claim_id_fkey')),
    sa.PrimaryKeyConstraint('log_id', name=op.f('adjudication_logs_pkey')),
    sa.UniqueConstraint('claim_id', name=op.f('adjudication_logs_claim_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_adjudication_logs_log_id'), 'adjudication_logs', ['log_id'], unique=False)
    op.create_table('extraction_logs',
    sa.Column('log_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('claim_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('num_pages', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('processing_time_sec', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_tokens', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('cost_usd', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['claim_id'], ['claims.claim_id'], name=op.f('extraction_logs_claim_id_fkey')),
    sa.PrimaryKeyConstraint('log_id', name=op.f('extraction_logs_pkey')),
    sa.UniqueConstraint('claim_id', name=op.f('extraction_logs_claim_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_extraction_logs_log_id'), 'extraction_logs', ['log_id'], unique=False)
    op.drop_index(op.f('ix_performance_logs_log_id'), table_name='performance_logs')
    op.drop_table('performance_logs')
    # ### end Alembic commands ###
